generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model RequestToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  createdAt DateTime @default(now())
  @@map("requestTokens")
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  key       String  @unique

  agenda Agenda[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiredAt DateTime
  deletedAt DateTime?
  @@map("tokens")
}

model Agenda {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  start DateTime
  end DateTime
  description String?

  owner Token  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @db.ObjectId

  color String?

  events Event[]
  labels Label[]
  statuses Status[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
 archived Boolean @default(false)

 @@map("agendas")
}

model Label {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  title String
  color String

  events Event[] @relation(fields: [eventIds], references: [id])
  eventIds String[] @db.ObjectId
 
  agenda Agenda @relation(fields: [agendaId], references: [id], onDelete: Cascade)
  agendaId String @db.ObjectId

  @@map("labels")
}

enum StatusType {
  TODO
  INPROGRESS
  COMPLETED
}

model Status {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  title String
  type StatusType

  events Event[]

  agenda Agenda @relation(fields: [agendaId], references: [id], onDelete: Cascade)
  agendaId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
 archived Boolean @default(false)

  @@map("statuses")
}


enum EventRepeat {
  DAILY
  WEEKLY
  MONTHLY
}

model Event {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  title String
  start DateTime
  end DateTime
  description String?

  status Status? @relation(fields: [statusId], references: [id])
  statusId String? @db.ObjectId

  repeat EventRepeat?
  cancelledAt DateTime[]

  agenda Agenda @relation(fields: [agendaId], references: [id], onDelete: Cascade)
  agendaId String @db.ObjectId

  labels Label[] @relation(fields: [labelIds], references: [id])
  labelIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
 archived Boolean @default(false)

 @@map("events")
}


