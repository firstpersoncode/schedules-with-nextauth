generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @db.ObjectId

  createdAt DateTime @default(now())

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @db.ObjectId

   @@map("sessions")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String  @unique
  password  String?
  name      String?
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  projects Project[] @relation(fields: [projectIds], references: [id])
  projectIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  archived Boolean @default(false)

  @@map("users")
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Project {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  description String?

  agendas Agenda[]
  labels Label[]

  users User[] @relation(fields: [userIds], references: [id])
  userIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
 archived Boolean @default(false)

 @@map("projects")
}

model Agenda {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  start DateTime
  end DateTime?
  description String?
  
  events Event[]

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
 archived Boolean @default(false)

 @@map("agendas")
}

model Label {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  title String
  color String

  events Event[] @relation(fields: [eventIds], references: [id])
  eventIds String[] @db.ObjectId
 
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String @db.ObjectId

  @@map("labels")
}

enum EventType {
  TASK
  UNAVAILABILITY
}

enum EventStatus {
  TODO
  INPROGRESS
  COMPLETED
}

model Event {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  title String
  start DateTime
  end DateTime
  description String?
  
  status EventStatus
  type EventType

  agenda Agenda @relation(fields: [agendaId], references: [id], onDelete: Cascade)
  agendaId String @db.ObjectId

  parent Event? @relation("ParentEvent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @db.ObjectId
  subEvents Event[] @relation("ParentEvent")

  labels Label[] @relation(fields: [labelIds], references: [id])
  labelIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
 archived Boolean @default(false)

 @@map("events")
}



